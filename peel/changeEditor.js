
var wtw = wtw ? wtw : {};
wtw.changeEditor = (function() {

    var defaultOptions = {
        x:'asdfasdf',
        // TODO : refactor this to use a map id: { change  }
        // all data generated by server side comparison goes here.
        // this is temporary mock data.
        /* changes:[] to be passed in by user. */

    // all view customization data goes here.
        config: {
            rejectIcon: '<i class="fa fa-circle-o"/>',
            acceptIcon: '<i class="fa fa-check-circle"/>',
            inputIcon: '<li class="fa fa-asterisk change-input-icon"></li>',
            onChangeAdded:null,
            idAttr:'data-change-id',
            refAttr:'data-change-ref',

            // @Deprecated.  use idAttr & refAttr instead!
            idSelectorTemplate: '[data-change-id="${uid}"]',
            // @Deprecated.  use idAttr & refAttr instead!
            itemChangeRefAttr: 'data-change-ref',

            open: true,
            expanded:false,
            trigger: 'click',
            title:'#changePanelTitle',
            content:'#changePanelContent',
            inputTitle:'#changeInputTitle',
            inputContent:'#changeInputContent',
            header: 'Changes'
        }
    };

    var init = function(opts) {
        this.options = $.extend(true,{},opts,defaultOptions);
        var config = this.options.config;

        $('.change-panel').changePanel(this.options)
            .on('changepanelselect', function(e,id) {
                getInput(id).changeInput('activate', id);
            })
            .on('changepanelaccept', function(e,id,index,value) {
                getInput(id).changeInput('accept',id,index,value);
            });

        // create ALL the possible change inputs (they are lazy. popup won't be created unless they click on it)
        $.each(this.options.changes, function(i,change) {
            var $input = $('[data-change-id="'+change.id+'"]');
            $input.changeInput({config:config, change:change})
                .on('changeinputupdate', function(e, id, index, value) {
                    $('.change-panel').changePanel('updateChange', id, index, value);
                })
                .on('changeinputnext', function(e) {
                    next($input);
                })
                .on('changeinputprev', function(e) {
                    prev($input);
                });
        });

        // if you click somewhere outside of input popup, then hide them.
        // (you must check to make sure the click didn't happen inside a visible popup - in that case just leave it).
        $('body').on('click', function (e) {
            $('.change-input-icon').each(function () {
                //the 'is' for buttons that trigger popups
                //the 'has' for icons within a button that triggers a popup
                if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                    $(this).popover('hide');
                }
            });
        });
    };

    var getInput = function(id) {
        // TODO : refactor out hard coded attribute.
        return $('[data-change-id="'+id+'"]');
    };

    var go = function($input, delta) {
        var $inputs = $('[data-change-id]:visible');
        var from  = $inputs.index($input);
        var to = from + delta;
        // TODO :assert from is defined >=0.
        if (to>=$inputs.length) to = 0;
        if (to<0) to = $inputs.length-1;
        $input.changeInput('hide');
        $inputs.eq(to).changeInput('activateAndShowPopup');
    };

    var next = function($input) {
        go($input, 1);
    };

    var prev = function($input) {
        go($input,1);
    };

    return {
        init: init
        // add other public methods you want to expose here...
    }

})();
