// TODO : refactor changeInput popover code into it's own file.
// use underscore to make all methods private

$.widget( "wtw.changeEditor", {

    defaultOptions: {
        // all data generated by server side comparison goes here.
        // this is temporary mock data.
        changes:[
            // add/delete/modify.   instead of acord xpath    broker, carrier values.       ignore. don't include this.
            //                       use an id.
            {type:'modify',         uid: 937,               values: ['apple','orange'],     summary:'to-be-generated' },
            {type:'delete',         uid: 840,               values: ['Ford','Toyota'],      summary:'to-be-generated' }
        ],

        // all view customization data goes here.
        config: {
            rejectIcon: '<i class="fa fa-circle-o"/>',
            acceptIcon: '<i class="fa fa-check-circle"/>',
            inputIcon: '<li class="fa fa-asterisk change-input-icon"></li>',
            onChangeAdded:null,
            uidSelectorTemplate: '[data-change-id="${uid}"]',
            itemChangeRefAttr: 'data-change-ref',
            open: true,
            expanded:false,
            trigger: 'click',
            title:'#title',
            content:'#content',
            header: 'Changes',
            valueLabels: ['Broker', 'Carrier'],
            uidLabels:{840:'Vehicle Manufacturer?',937:'Fruit'},
        },
    },

    _create: function() {
        var options = $.extend(this.options, this.options, this.defaultOptions);
        this.element.addClass('change-editor');
        this._formatData(options);
        this._prototypeInputs(options);
        this._createPopup(this.element, options);
        this._createInputPopups(options);
    },

    _getInputIcon: function ($input) {
        // icon is assumed to be the next element in DOM.
        return $input.next();
    },

    _activatePrevInput: function ($input) {
        var $inputs = this._getAllChangeInputs();
        var i = $inputs.index($input);
        var $prev = $inputs.eq( (i - 1 + $inputs.length) % $inputs.length );
        this._getInputIcon($input).popover('hide');
        this._activateInput($prev,true);
    },

    _activateNextInput: function ($input) {
        var $inputs = this._getAllChangeInputs();
        var i = $inputs.index($input);
        var $next = $inputs.eq( (i + 1) % $inputs.length );
        $input.popover('hide');
        // TODO : read this attribute from config. not hard coded.
        this._activateInput($next,true);
    },

    _updateChangeInputValues: function ($changeValues) {

    },

    _setInputChangeValue: function (acceptIcon, $input) {
        var v = $(acceptIcon).siblings('.change-input-value').text();
        console.log('setting value ' + v);
        $input.get(0).changeValue(v);
        $(acceptIcon).parents('.change-values').find('.change-value').removeClass('accepted');
        $(acceptIcon).parents('.change-value').addClass('accepted');
    },

    _updateChangeInputState: function ($popover, $input) {
        var currentValue = $input.get(0).changeValue();

        $popover.find('.change-value').each(function(i, value) {
            // TODO : make a compareChangeValue method. this may get tricky for non-string values (boolean, dates, etc...)
            if (currentValue===$(value).find('.change-input-value').text()) {
                $(this).addClass('accepted');
            }
            else {
                $(this).removeClass('accepted');
            }
        });
    },

    _toggleInputPopup: function ($icon, $input, change) {
        var $this = this;
        // show lazily instantiated popover.
        if ($icon.data('bs.popover')) {
            $icon.popover('toggle');
            return;
        }

        // create if doesn't exist.
        $icon.popover({
            placement: 'bottom',
            trigger: 'manual',
            html : true,
            title: function() {
                var template = Handlebars.compile($('#dialogTitle').html());
                return template(change);
            },
            content: function() {
                var template = Handlebars.compile($('#dialogContent').html());
                return template(change);
            }
        })
        .data('bs.popover')
        .tip()
        .addClass('change-input-popover');
        $icon.popover('show');

        $icon.on('shown.bs.popover', function() {
            var $popover = $icon.data('bs.popover').tip();
            $this._updateChangeInputState($popover, $input);
            $popover.find('.next-change').click(function() {
                $this._activateNextInput($input);
            });
            $popover.find('.prev-change').click(function() {
                $this._activatePrevInput($input);
            });
            $popover.find('.change-input-accept').click(function() {
                $this._setInputChangeValue(this, $input);
            });
        });

    },

    _createInputPopups: function (options) {
        var $this = this;
        $.each(options.changes, function(i,change) {
            var $input = $this._getChangeInput(change.uid);
            var $icon = $(options.config.inputIcon);
            $icon.insertAfter($input);

            $icon.click(function() {
                $this._toggleInputPopup($(this), $input, change);
            });

        });

    },

    _createPopup: function (element, options) {
        var shown = this._editorShown.bind(this);
        var config = options.config;
        var title = config.title;
        var content = config.content;

        element.popover({
            placement: 'bottom',
            trigger: 'click',
            container:'body',
            html : true,
            title: function() {
                var template = Handlebars.compile($(title).html());
                return template(options);
            },
            content: function() {
                var template = Handlebars.compile($(content).html());
                return template(options);
            }
        })
            .data('bs.popover')
            .tip()
            .addClass('change-panel-popover');

        element.on('shown.bs.popover', function() {
            shown($(this), options);
        });
        element.popover('show');

        // hide any change input popovers when you click somewhere else on screen.
        $('body').on('click', function (e) {
            $('.change-input-icon').each(function () {
                //the 'is' for buttons that trigger popups
                //the 'has' for icons within a button that triggers a popup
                if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
                    $(this).popover('hide');
                }
            });
        });
    },

    _initChangeState : function(i, change) {
        var $this = this;
        var $input = $this._getChangeInput(change.uid);
        var input = $input.get(0);
        var currentValue = $input.get(0).changeValue();
        $.each(change.values, function(idx, value) {
            // TODO : ignore case and/or whitespace?
            if (currentValue===value) {
                $this._getChangeItem(change.uid);
                $this._updateActiveValue($this._getChangeItem(change.uid), change, idx);
            }
        });
    },

    _initState : function(options) {
        var initChangeState = this._initChangeState.bind(this);
        $.each(options.changes, initChangeState);
    },

    _formatData : function(options) {
        var config = options.config;
        $.each(options.changes, function(i,change) {
            console.log('change'+change);
            change.summary = config.uidLabels[change.uid];
            if (!change.summary) {
                change.summary = '['+change.uid+']';
                console.log('no label was given for the change with id ' + change.uid + '  (using id as default label)');
            }
            change.formattedValues = [];
            $.each(change.values, function(i,value) {
                console.log('value'+value);
                change.formattedValues.push(
                    {   value: value,
                        label:config.valueLabels[i]
                    }
                );
            });
        });
    },

    _getChangeInput : function(uid) {
        var selector = this.options.config.uidSelectorTemplate.replace('${uid}', uid);
        var $result = $(selector);
        if ($result.length==0) {
            throw 'can not find element matching "' + selector + '" when trying to view change  (there should be a form input that matches this)';
        }
        return $result;
    },

    _getAllChangeInputs : function(uid) {
        var selector = this.options.config.uidSelectorTemplate.replace('="${uid}"', '');
        if ($(selector).length==0) {
            throw 'can not find any change form inputs "' + selector;
        }
        return $(selector);
    },

    _getChangeItem : function(uid) {
        var selector = '['+this.options.config.itemChangeRefAttr +'="'+ uid+'"]';
        if ($(selector).length==0) {
            throw 'can not find element matching "' + selector + '" when trying to view change  (there should be a form input that matches this)';
        }
        return $(selector);
    },

    // add a generic "changeValue" function to all form inputs.
    // it is responsible for getting/setting values.
    _prototypeInputs: function(options) {
        var cv = this.changeValue;
        var $this = this;
        $.each(options.changes, function(i,change) {
            var $input = $this._getChangeInput(change.uid);
            var input = $input.get(0);
            input.changeValue = cv;
        });
    },

    changeValue : function(value) {
        // TODO : refactor into method and pass function into switch.
        var $this = $(this);
        if (value) {
            console.log('setting value for ' + $this.attr('data-change-id') + ' to ' + value);
            if (this.type=='text') {
                $this.val(value);
            }
            else if (this.type='select') {
                $this.val(value);
            }
        }
        else {
            var result = '';
            if (this.type == 'text') {
                result = $this.val();
            }
            else if (this.type = 'select') {
                result = $this.val();
            }
        }
        return result;
    },

    _updateActiveValue: function ($changeItem, change, index) {
        // remove all other (if any) active items, and highlight this one.
        // TODO : chain these two lines together after debugging...
        $changeItem.find('.change-value').removeClass('active');
        $changeItem.find('.change-value').eq(index).addClass('active');
    },

    _setActiveChangeValue : function($action, change, index) {
        var value = change.values[index];
        var $input = this._getChangeInput(change.uid);
        $input.get(0).changeValue(value);
        this._updateActiveValue($action.parents('.change-item'),change,index);
    },

    _activateInput: function ($input, showPopup) {
        if ($input.length==0) return;
        this._getAllChangeInputs().removeClass('active');
        $('html, body').animate({
            scrollTop: $input.offset().top}, 350, function() {
            $input.addClass('active');
        });
        if (showPopup) {
            this._getInputIcon($input).popover('show');
        }
    },

    viewChange : function($changeItem) {
        // select the item in the main panel
        var uid = $changeItem.attr(this.options.config.itemChangeRefAttr);
        $('.change-input').popover('hide');
        $changeItem.siblings().removeClass('active');
        $changeItem.addClass('active');
        // ..now deal with the form input itself
        this._activateInput(this._getChangeInput(uid));
    },

    onChangeAdded : function($changeItem, options, change) {
        $changeItem.attr('data-change-ref',change.uid);
        var $changeValues = $changeItem.find('.change-value');
        var setActiveChange = this._setActiveChangeValue.bind(this);
        var viewChange = this.viewChange.bind(this);

        // if you click on the *unselected* icon, it will accept the change (set its value and update status).
        $.each($changeValues, function(i, changeValue) {
            $(changeValue).find('.change-reject').click(function(e) {
                setActiveChange($(this), change, i);
            });
        });

        // if you click on item row, it will scroll the window and highlight the change in the form.
        $changeItem.click(function(e) {
            // TODO : add highlight change animation.
            viewChange($changeItem);
        });
    },

    _advanceActiveChange: function ($content, delta) {
        var $items = $content.find('.change-item');
        var $active = $content.find('.change-item.active');
        var index = ($active.length!=0) ? $items.index($active)+delta : 0;
        var count = $items.length;
        index = (index<0) ? count - 1 :
                (index>=count) ? 0 :
                    index;
        $active.removeClass('active');
        this.viewChange($items.eq(index));
    },

    _initPrevNextButtons: function ($popover, options) {
        var advance = this._advanceActiveChange.bind(this);
        $popover.find('.next-change').click(function() {
            advance($popover, 1);
        });
        $popover.find('.prev-change').click(function() {
            advance($popover, -1);
        });
    },

    _editorShown : function($popoverTrigger, options) {
        // the trigger is the element that the popover is attached to.  we need the actual popover itself.
        var $popover = $popoverTrigger.data('bs.popover').tip();
        var callback = options.config.onChangeAdded ? options.config.onChangeAdded.bind(this) : this.onChangeAdded.bind(this);

        this._initPrevNextButtons($popover, options);

        $popover.find('.change-item').each(function(i) {
            callback($(this), options, options.changes[i]);
        });

        this._initState(options);
    }

});














