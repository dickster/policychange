
$.widget( "wtw.changeEditor", {

    defaultOptions: {
        // all data generated by server side comparison goes here.
        // this is temporary mock data.
        changes:[
            {type:'modify', uid: 937, values: ['apple','orange'], summary:'to-be-generated' },
            {type:'delete', uid: 840, values: ['Ford','Toyota'], summary:'to-be-generated' }
        ],

        // all view customization data goes here.
        config: {
            rejectIcon: '<i class="fa fa-circle-o"/>',
            acceptIcon: '<i class="fa fa-check-circle"/>',
            onChangeAdded:null,                 //this.defaultOnChangeAdded,  //if null, uses default callback.
            uidSelectorTemplate: '[data-change-id="${uid}"]',
            itemSelectorTemplate: '[data-change-ref="${uid}"]',
            open: true,
            expanded:false,
            trigger: 'click',
            title:'#title',
            content:'#content',
            header: 'Changes',
            valueLabels: ['broker', 'carrier'],
            uidLabels:{840:'Vehicle Manufacturer?',937:'Fruit'},
        },
    },


    _create: function() {

        // TODO : $.extend(), so caller can pass in their own options.
        var options = $.extend(this.options, this.options, this.defaultOptions);
        var config = options.config;
        var title = config.title;
        var content = config.content;
        var shown = this.editorShown.bind(this);

        this.init(options);

        this.element.addClass('change-editor');

        this.element.popover({
            placement: 'bottom',
            trigger: 'click',
            container:'body',
            html : true,
            title: function() {
                var template = Handlebars.compile($(title).html());
                return template(options);
            },
            content: function() {
                var template = Handlebars.compile($(content).html());
                return template(options);
            }
        });
        this.element.on('shown.bs.popover', function() {
            shown($(this), options);
        });
        this.element.popover('show');
    },

    // trigger events when initialized, summary dialog expanded/collapsed.  change dialog shown/hidden.

    _scrollTo: function(change) {

    },

    _createChangeSummary: function(change) {

    },

    _createChange: function(change) {

    },

    init : function(options) {
        this.formatData(options);
        this.prototypeInputs(options);
    },

    initChangeState : function(i,change) {
        var $this = this;
        var $input = $this.getChangeInput(change.uid);
        var input = $input.get(0);
        var currentValue = $input.get(0).changeValue();
        $.each(change.values, function(idx, value) {
            // TODO : ignore case and/or whitespace?
            if (currentValue===value) {
                $this.getChangeItem(change.uid);
                $this.updateActiveValue($this.getChangeItem(change.uid), change, idx);
            }
        });
    },

    initState : function($content, options) {
        var initChangeState = this.initChangeState.bind(this);
        $.each(options.changes, initChangeState);
    },

    formatData : function(options) {
        $.each(options.changes, function(i,change) {
            console.log('change'+change);
            change.summary = options.config.uidLabels[change.uid];
            if (!change.summary) {
                change.summary = '['+change.uid+']';
                console.log('no label was given for the change with id ' + change.uid + '  (using id as default label)');
            }
            change.formattedValues = [];
            $.each(change.values, function(i,value) {
                console.log('value'+value);
                change.formattedValues.push(
                    {   value: value,
                        label:options.config.valueLabels[i]
                    }
                );
            });
        });
    },

    getChangeInput : function(uid) {
        var selector = this.options.config.uidSelectorTemplate.replace('${uid}', uid);
        if ($(selector).length==0) {
            throw 'can not find element matching "' + selector + '" when trying to view change  (there should be a form input that matches this)';
        }
        return $(selector);
    },


    getAllChangeInputs : function(uid) {
        var selector = this.options.config.uidSelectorTemplate.replace('="${uid}"', '');
        if ($(selector).length==0) {
            throw 'can not find any change form inputs "' + selector;
        }
        return $(selector);
    },


    getChangeItem : function(uid) {
        var selector = this.options.config.itemSelectorTemplate.replace('${uid}', uid);
        if ($(selector).length==0) {
            throw 'can not find element matching "' + selector + '" when trying to view change  (there should be a form input that matches this)';
        }
        return $(selector);
    },


    prototypeInputs: function(options) {
        var cv = this.changeValue;
        var $this = this;
        $.each(options.changes, function(i,change) {
            var $input = $this.getChangeInput(change.uid);
            var input = $input.get(0);
            input.changeValue = cv;
        });
    },

    changeValue : function(value) {
        // TODO : refactor into method and pass function into switch.
        var $this = $(this);
        if (value) {
            console.log('setting value for ' + $this.attr('data-change-id') + ' to ' + value);
            if (this.type=='text') {
                $this.val(value);
            }
            else if (this.type='select') {
                $this.val(value);
            }
        }
        else {
            var result = '';
            if (this.type == 'text') {
                result = $this.val();
            }
            else if (this.type = 'select') {
                result = $this.val();
            }
        }
        console.log('getting value for ' + $this.attr('data-change-id') + ' : ' + result);
        return result;
    },

    updateActiveValue: function ($changeItem, change, index) {
        // remove all other (if any) active items, and highlight this one.
        // TODO : chain these two lines together after debugging...
        $changeItem.find('.change-value').removeClass('active');
        $changeItem.find('.change-value').eq(index).addClass('active');
    },

    setActiveChangeValue : function($action, change, index) {
        var value = change.values[index];
        var $input = this.getChangeInput(change.uid);
        $input.get(0).changeValue(value);
        this.updateActiveState($action.parentsUntil('.change-item'),change,index);
    },

    updateChangeValue : function($changeValue, change, index) {
        // update active state.
    },

    rejectChange : function() {
        alert('rejected');
    },

    viewChange : function($changeItem, change, options) {
        $('html, body').animate({scrollTop: this.getChangeInput(change.uid).offset().top}, 400);
        $changeItem.parent().find('.change-item').removeClass('active');
        $changeItem.addClass('active');
        this.getAllChangeInputs().removeClass('active');
        this.getChangeInput(change.uid).addClass('active');
    },

    defaultOnChangeAdded : function($changeItem, options, change) {
        var $changeValues = $changeItem.find('.change-value');
        var viewChange = this.viewChange.bind(this);
        var setActiveChange = this.setActiveChangeValue.bind(this);

        // if you click on the *unselected* icon, it will accept the change (set its value and update status).
        $.each($changeValues, function(i, changeValue) {
            $(changeValue).find('.change-reject').click(function(e) {
                setActiveChange($(this), change, i);
            });
        });

        // if you click on item row, it will scroll the window and highlight the change in the form.
        $changeItem.click(function(e) {
            // TODO : add highlight change animation.
            viewChange($changeItem, change, options);
        });
    },



    editorShown : function($popover, options) {
        var callback = options.config.onChangeAdded ? options.config.onChangeAdded.bind(this) : this.defaultOnChangeAdded.bind(this);
        var $content = $popover.data('bs.popover').tip().find('.popover-content');
        this.initState($content, options);

        $content.find('.change-item').each(function(i) {
            callback($(this), options, options.changes[i]);
        });
    }

});














