// TODO : refactor changeInput popover code into it's own file.
// use underscore to make all methods private


// TODO : add datalist options to text fields to show all possible values.

// note : in order to override methods for basic widget, see
// https://learn.jquery.com/jquery-ui/widget-factory/extending-widgets/


$.widget( "wtw.changeEditor", {
    // CHANGE EDITOR.

    // TODO :
    //  options : {}    then anyone can access it.

    defaultOptions: {
            // TODO : refactor this to use a map id: { change  }

        // all data generated by server side comparison goes here.
        // this is temporary mock data.
        changes:[
            // add/delete/modify.   instead of acord xpath    broker, carrier values.       ignore. don't include this.
            //                       use an id.
            {type:'modify',         uid: 937,               values: ['apple','orange'],     summary:'to-be-generated' },
            {type:'delete',         uid: 840,               values: ['Ford','Toyota'],      summary:'to-be-generated' }
        ],

        // all view customization data goes here.
        config: {
            rejectIcon: '<i class="fa fa-circle-o"/>',
            acceptIcon: '<i class="fa fa-check-circle"/>',
            inputIcon: '<li class="fa fa-asterisk change-input-icon"></li>',
            onChangeAdded:null,
            uidSelectorTemplate: '[data-change-id="${uid}"]',
            itemChangeRefAttr: 'data-change-ref',
            open: true,
            expanded:false,
            trigger: 'click',
            title:'#title',
            content:'#content',
            header: 'Changes',
            valueLabels: ['Broker', 'Carrier'],
            uidLabels:{840:'Vehicle Manufacturer?',937:'Fruit'},
        },
    },

    _create: function() {
        // create panel.
        var panel = Object.create(ChangePanel.prototype);
        // set options.

        $panel.init(options, this);  // 2nd parameter is callback.

        // $inputChanged - on('change.wtw')
        // itemSelected
        // next/prevItem
        // next/prevInput
        // itemValueSelected
        //


    },



    // TODO : refactor all these methods to be prototyped on input jquery objects.
    // that way i don't have to muck around with context all the time.
    // also i should make 2 extensions of popover - changePanelPopover & changeInputPopover
    // each class would contain a reference to the popover & it's associated element (icon or link).


    _activatePrevInput: function ($input) {
        var $inputs = this._getAllChangeInputs();
        var i = $inputs.index($input);
        var $prev = $inputs.eq( (i - 1 + $inputs.length) % $inputs.length );
        this._getInputIcon($input).popover('hide');
        this._activateInput($prev,true);
    },

    _activateNextInput: function ($input) {
        var $inputs = this._getAllChangeInputs();
        var i = $inputs.index($input);
        var $next = $inputs.eq( (i + 1) % $inputs.length );
        this._getInputIcon($input).popover('hide');
        this._activateInput($next,true);
    },



    _updateActiveValue: function ($changeItem, change, index) {
        // remove all other (if any) active items, and highlight this one.
        // TODO : chain these two lines together after debugging...
        $changeItem.find('.change-value').removeClass('active');
        $changeItem.find('.change-value').eq(index).addClass('active');
    },

    _activateInput: function ($input, showPopup) {
        if ($input.length==0) return;
        this._getAllChangeInputs().removeClass('active');
        $('html, body').animate({
            scrollTop: $input.offset().top}, 350, function() {
            $input.addClass('active');
        });
        if (showPopup) {
            this._toggleInputPopup($input);
        }
    },

    viewChange : function($changeItem) {
        // select the item in the main panel
        var uid = $changeItem.attr(this.options.config.itemChangeRefAttr);
        $('.change-input').popover('hide');
        $changeItem.siblings().removeClass('active');
        $changeItem.addClass('active');
        // ..now deal with the form input itself
        this._activateInput(this._getChangeInput(uid));
    },

    _advanceActiveChange: function ($content, delta) {
        var $items = $content.find('.change-item');
        var $active = $content.find('.change-item.active');
        var index = ($active.length!=0) ? $items.index($active)+delta : 0;
        var count = $items.length;
        index = (index<0) ? count - 1 :
                (index>=count) ? 0 :
                    index;
        $active.removeClass('active');
        this.viewChange($items.eq(index));
    },


});
